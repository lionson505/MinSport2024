    const handleStartMatch = async () => {
        try {
            await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                status: 'ONGOING'
            });

            const startTimeISO = new Date().toISOString();
            await axiosInstance.put(`/live-matches/${match.id}`, {
                startTime: startTimeISO
            });

            const newIntervalId = setInterval(() => {
                setMatchTimer(prev => ({
                    ...prev,
                    currentMinute: prev.currentMinute + 1
                }));
            }, 60000);

            setMatchTimer(prev => ({
                ...prev,
                isRunning: true,
                intervalId: newIntervalId
            }));

            setMatchData(prev => ({ ...prev, status: 'FIRST_HALF' }));
            toast.success('Match started successfully');
        } catch (error) {
            toast.error('Failed to start match');
            console.error(error);
        }
    };

    const handleHalfTime = async () => {
        try {
            await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                status: 'HALFTIME'
            });

            if (matchTimer.intervalId) {
                clearInterval(matchTimer.intervalId);
            }

            setMatchTimer(prev => ({
                ...prev,
                isRunning: false,
                intervalId: null
            }));

            setMatchData(prev => ({ ...prev, status: 'HALF_TIME' }));
            toast.success('Half time started');
        } catch (error) {
            toast.error('Failed to set half time');
            console.error(error);
        }
    };

    const handleSecondHalf = async () => {
        try {
            await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                status: 'HTL'
            });

            const newIntervalId = setInterval(() => {
                setMatchTimer(prev => ({
                    ...prev,
                    currentMinute: prev.currentMinute + 1
                }));
            }, 60000);

            setMatchTimer(prev => ({
                ...prev,
                isRunning: true,
                intervalId: newIntervalId,
                currentMinute: 45
            }));

            setMatchData(prev => ({ ...prev, status: 'SECOND_HALF' }));
            toast.success('Second half started');
        } catch (error) {
            toast.error('Failed to start second half');
            console.error(error);
        }
    };

    const handleEndMatch = async () => {
        try {
            await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                status: 'ENDED'
            });

            if (matchTimer.intervalId) {
                clearInterval(matchTimer.intervalId);
            }

            setMatchTimer(prev => ({
                ...prev,
                isRunning: false,
                intervalId: null
            }));

            setMatchData(prev => ({ ...prev, status: 'FULL_TIME' }));
            toast.success('Match ended successfully');
        } catch (error) {
            toast.error('Failed to end match');
            console.error(error);
        }
    };


        const handleStartMatch = async () => {
            try {
                await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                    status: 'ONGOING'
                });

                const startTimeIOso = new Date(Date.now()).toISOString();

                await axiosInstance.put(`/live-matches/${match.id}`, {
                    startTime: startTimeIOso
                })
                setTimerRunning(true);
                setMatchData(prev => ({ ...prev, status: 'FIRST_HALF' }));
                toast.success('Match started successfully');
            } catch (error) {
                toast.error('Failed to start match');
                console.error(error);
            }
        };

        const handleEndMatch = async () => {
            try {
                await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                    status: 'ENDED'
                });
                setTimerRunning(false);
                setMatchData(prev => ({ ...prev, status: 'FULL_TIME' }));
                toast.success('Match ended successfully');
            } catch (error) {
                toast.error('Failed to end match');
                console.error(error);
            }
        };

        const handleHalfTime = async () => {
            try {
                await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                    status: 'HALFTIME'
                });
                setTimerRunning(false);
                setMatchData(prev => ({ ...prev, status: 'HALF_TIME' }));
                toast.success('Half time started');
            } catch (error) {
                toast.error('Failed to set half time');
                console.error(error);
            }
        };

        const handleSecondHalf = async () => {
            try {
                await axiosInstance.patch(`/live-matches/${match.id}/status`, {
                    status: 'HTL'
                });
                setTimerRunning(true);
                setCurrentMinute('45');
                setMatchData(prev => ({ ...prev, status: 'SECOND_HALF' }));
                toast.success('Second half started');
            } catch (error) {
                toast.error('Failed to start second half');
                console.error(error);
            }
        };