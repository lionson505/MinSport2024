
### Instruction to Create Operator Scoreboard Forms with Player/Staff Management

---

**Objective**:  
Enhance the operator panel to include a feature for **fetching or manually inputting team players and staff** before recording match events. Players and staff will be dynamically used in game-specific forms (football, basketball, volleyball).

---

### Steps to Implement

#### 1. Add Player/Staff Fetch or Input Step

1. **Fetch Players and Staff**:
   - Before starting match recording, fetch players and staff for the selected teams from the backend API:
     - Endpoint: `/api/teams/:teamId/players`  
     - Endpoint: `/api/teams/:teamId/staff`
   - Display the list of players and staff for confirmation.

2. **Manual Input Option**:
   - If team data is unavailable, allow operators to manually add players and staff:
     - Player: Name, position, number
     - Staff: Name, role (e.g., coach, physiotherapist)

3. **Save to State**:
   - Store players and staff in state variables, e.g., `teamAPlayers`, `teamBPlayers`, `teamAStaff`, `teamBStaff`.
   - Pass these variables to the match forms dynamically.

---

#### 2. Update Operator Panel Workflow

1. **Team Setup Step**:
   - Add a step in the operator panel for managing team data:
     - Fetch players and staff for both teams when the match starts.
     - Display fetched data with options to edit or add manually.

2. **Game Recording Step**:
   - Proceed to the dynamic scoreboard form only after the teams are set up.
   - Use team data to populate dropdowns or autocomplete fields for players in goals, cards, fouls, etc.

---

#### 3. Modify Game Forms

1. **Dynamic Inputs**:
   - Replace static inputs for players with dropdowns or autocomplete fields populated with fetched player data.
   - Example: In a football form, let the operator select the player who scored a goal or received a card from a dropdown.

2. **Pass Team Data**:
   - Pass `teamAPlayers` and `teamBPlayers` as props to the game forms.

---

### React Code Structure

#### Parent Component: OperatorPanel

```jsx
import React, { useState, useEffect } from "react";
import FootballForm from "./FootballForm";
import BasketballForm from "./BasketballForm";
import VolleyballForm from "./VolleyballForm";
import TeamSetup from "./TeamSetup";

function OperatorPanel({ event }) {
    const [gameType, setGameType] = useState(event.type || "football");
    const [teamAPlayers, setTeamAPlayers] = useState([]);
    const [teamBPlayers, setTeamBPlayers] = useState([]);
    const [teamAStaff, setTeamAStaff] = useState([]);
    const [teamBStaff, setTeamBStaff] = useState([]);
    const [isTeamsReady, setIsTeamsReady] = useState(false);

    const handleTeamSetupComplete = (teamAData, teamBData) => {
        setTeamAPlayers(teamAData.players);
        setTeamAStaff(teamAData.staff);
        setTeamBPlayers(teamBData.players);
        setTeamBStaff(teamBData.staff);
        setIsTeamsReady(true);
    };

    const renderForm = () => {
        switch (gameType) {
            case "football":
                return <FootballForm event={event} teamAPlayers={teamAPlayers} teamBPlayers={teamBPlayers} />;
            case "basketball":
                return <BasketballForm event={event} teamAPlayers={teamAPlayers} teamBPlayers={teamBPlayers} />;
            case "volleyball":
                return <VolleyballForm event={event} teamAPlayers={teamAPlayers} teamBPlayers={teamBPlayers} />;
            default:
                return <p>Select a valid game type</p>;
        }
    };

    return (
        <div>
            <h1>Operator Panel</h1>
            <p>Managing: {event.name}</p>
            {!isTeamsReady ? (
                <TeamSetup
                    event={event}
                    onComplete={handleTeamSetupComplete}
                />
            ) : (
                <div>
                    <select value={gameType} onChange={(e) => setGameType(e.target.value)}>
                        <option value="football">Football</option>
                        <option value="basketball">Basketball</option>
                        <option value="volleyball">Volleyball</option>
                    </select>
                    {renderForm()}
                </div>
            )}
        </div>
    );
}

export default OperatorPanel;
```

---

#### TeamSetup Component

```jsx
import React, { useState, useEffect } from "react";

function TeamSetup({ event, onComplete }) {
    const [teamAPlayers, setTeamAPlayers] = useState([]);
    const [teamBPlayers, setTeamBPlayers] = useState([]);
    const [teamAStaff, setTeamAStaff] = useState([]);
    const [teamBStaff, setTeamBStaff] = useState([]);

    const fetchTeamData = async (teamId, setPlayers, setStaff) => {
        try {
            const playersResponse = await fetch(`/api/teams/${teamId}/players`);
            const players = await playersResponse.json();
            const staffResponse = await fetch(`/api/teams/${teamId}/staff`);
            const staff = await staffResponse.json();
            setPlayers(players);
            setStaff(staff);
        } catch (error) {
            console.error("Error fetching team data:", error);
        }
    };

    useEffect(() => {
        fetchTeamData(event.teamA.id, setTeamAPlayers, setTeamAStaff);
        fetchTeamData(event.teamB.id, setTeamBPlayers, setTeamBStaff);
    }, [event]);

    const handleComplete = () => {
        onComplete(
            { players: teamAPlayers, staff: teamAStaff },
            { players: teamBPlayers, staff: teamBStaff }
        );
    };

    return (
        <div>
            <h2>Team Setup</h2>
            <h3>{event.teamA.name}</h3>
            <ul>
                {teamAPlayers.map((player, index) => (
                    <li key={index}>{player.name}</li>
                ))}
            </ul>
            <h3>{event.teamB.name}</h3>
            <ul>
                {teamBPlayers.map((player, index) => (
                    <li key={index}>{player.name}</li>
                ))}
            </ul>
            <button onClick={handleComplete}>Proceed to Match Recording</button>
        </div>
    );
}

export default TeamSetup;
```

---

#### FootballForm Component with Players

```jsx
function FootballForm({ event, teamAPlayers, teamBPlayers }) {
    const [goals, setGoals] = useState([]);

    const addGoal = (team, playerId, minute) => {
        setGoals([...goals, { team, playerId, minute }]);
    };

    const handleSubmit = () => {
        const data = { goals };
        fetch(`/api/events/${event.id}/update`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
        }).then((res) => alert("Data submitted successfully!"));
    };

    return (
        <div>
            <h2>Football Match: {event.name}</h2>
            <h3>Add Goal</h3>
            <select>
                <option disabled selected>Select Team</option>
                <option value="teamA">{event.teamA.name}</option>
                <option value="teamB">{event.teamB.name}</option>
            </select>
            <select>
                <option disabled selected>Select Player</option>
                {teamAPlayers.map((player) => (
                    <option value={player.id} key={player.id}>
                        {player.name}
                    </option>
                ))}
                {teamBPlayers.map((player) => (
                    <option value={player.id} key={player.id}>
                        {player.name}
                    </option>
                ))}
            </select>
            <input type="number" placeholder="Minute" />
            <button onClick={() => addGoal("teamA", 1, 45)}>Add Goal</button>

            <button onClick={handleSubmit}>Submit</button>
        </div>
    );
}

export default FootballForm;
```

---

### Notes
- **Backend API**: Ensure the API endpoints for fetching and updating player/staff data are ready.
- **Error Handling**: Add proper error handling for API requests and form submissions.
- **Reusable Components**: Extract common input fields (e.g., player dropdowns) into reusable components.

---

